// Generated by gencpp from file vision_msgs/obj_msg.msg
// DO NOT EDIT!


#ifndef VISION_MSGS_MESSAGE_OBJ_MSG_H
#define VISION_MSGS_MESSAGE_OBJ_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision_msgs
{
template <class ContainerAllocator>
struct obj_msg_
{
  typedef obj_msg_<ContainerAllocator> Type;

  obj_msg_()
    : obj_id(0.0)
    , obj_score(0.0)
    , obj_center_x(0.0)
    , obj_center_y(0.0)
    , obj_size_x(0.0)
    , obj_size_y(0.0)  {
    }
  obj_msg_(const ContainerAllocator& _alloc)
    : obj_id(0.0)
    , obj_score(0.0)
    , obj_center_x(0.0)
    , obj_center_y(0.0)
    , obj_size_x(0.0)
    , obj_size_y(0.0)  {
  (void)_alloc;
    }



   typedef double _obj_id_type;
  _obj_id_type obj_id;

   typedef double _obj_score_type;
  _obj_score_type obj_score;

   typedef double _obj_center_x_type;
  _obj_center_x_type obj_center_x;

   typedef double _obj_center_y_type;
  _obj_center_y_type obj_center_y;

   typedef double _obj_size_x_type;
  _obj_size_x_type obj_size_x;

   typedef double _obj_size_y_type;
  _obj_size_y_type obj_size_y;





  typedef boost::shared_ptr< ::vision_msgs::obj_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_msgs::obj_msg_<ContainerAllocator> const> ConstPtr;

}; // struct obj_msg_

typedef ::vision_msgs::obj_msg_<std::allocator<void> > obj_msg;

typedef boost::shared_ptr< ::vision_msgs::obj_msg > obj_msgPtr;
typedef boost::shared_ptr< ::vision_msgs::obj_msg const> obj_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_msgs::obj_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_msgs::obj_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision_msgs::obj_msg_<ContainerAllocator1> & lhs, const ::vision_msgs::obj_msg_<ContainerAllocator2> & rhs)
{
  return lhs.obj_id == rhs.obj_id &&
    lhs.obj_score == rhs.obj_score &&
    lhs.obj_center_x == rhs.obj_center_x &&
    lhs.obj_center_y == rhs.obj_center_y &&
    lhs.obj_size_x == rhs.obj_size_x &&
    lhs.obj_size_y == rhs.obj_size_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision_msgs::obj_msg_<ContainerAllocator1> & lhs, const ::vision_msgs::obj_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::obj_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::obj_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::obj_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::obj_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::obj_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::obj_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_msgs::obj_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e2023751502f5af149d77b1a75f5f33";
  }

  static const char* value(const ::vision_msgs::obj_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e2023751502f5afULL;
  static const uint64_t static_value2 = 0x149d77b1a75f5f33ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_msgs::obj_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_msgs/obj_msg";
  }

  static const char* value(const ::vision_msgs::obj_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_msgs::obj_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float64 obj_id\n"
"float64 obj_score\n"
"float64 obj_center_x\n"
"float64 obj_center_y\n"
"float64 obj_size_x\n"
"float64 obj_size_y\n"
;
  }

  static const char* value(const ::vision_msgs::obj_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_msgs::obj_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obj_id);
      stream.next(m.obj_score);
      stream.next(m.obj_center_x);
      stream.next(m.obj_center_y);
      stream.next(m.obj_size_x);
      stream.next(m.obj_size_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct obj_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_msgs::obj_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_msgs::obj_msg_<ContainerAllocator>& v)
  {
    s << indent << "obj_id: ";
    Printer<double>::stream(s, indent + "  ", v.obj_id);
    s << indent << "obj_score: ";
    Printer<double>::stream(s, indent + "  ", v.obj_score);
    s << indent << "obj_center_x: ";
    Printer<double>::stream(s, indent + "  ", v.obj_center_x);
    s << indent << "obj_center_y: ";
    Printer<double>::stream(s, indent + "  ", v.obj_center_y);
    s << indent << "obj_size_x: ";
    Printer<double>::stream(s, indent + "  ", v.obj_size_x);
    s << indent << "obj_size_y: ";
    Printer<double>::stream(s, indent + "  ", v.obj_size_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MSGS_MESSAGE_OBJ_MSG_H
